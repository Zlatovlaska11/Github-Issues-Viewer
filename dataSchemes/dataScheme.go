package dataSchemes

import (
	"time"
)

type AutoGenerated []struct {
	URL           string `json:"url"`
	RepositoryURL string `json:"repository_url"`
	LabelsURL     string `json:"labels_url"`
	CommentsURL   string `json:"comments_url"`
	EventsURL     string `json:"events_url"`
	HTMLURL       string `json:"html_url"`
	ID            int64  `json:"id"`
	NodeID        string `json:"node_id"`
	Number        int    `json:"number"`
	Title         string `json:"title"`
	User          struct {
		Login             string `json:"login"`
		ID                int    `json:"id"`
		NodeID            string `json:"node_id"`
		AvatarURL         string `json:"avatar_url"`
		GravatarID        string `json:"gravatar_id"`
		URL               string `json:"url"`
		HTMLURL           string `json:"html_url"`
		FollowersURL      string `json:"followers_url"`
		FollowingURL      string `json:"following_url"`
		GistsURL          string `json:"gists_url"`
		StarredURL        string `json:"starred_url"`
		SubscriptionsURL  string `json:"subscriptions_url"`
		OrganizationsURL  string `json:"organizations_url"`
		ReposURL          string `json:"repos_url"`
		EventsURL         string `json:"events_url"`
		ReceivedEventsURL string `json:"received_events_url"`
		Type              string `json:"type"`
		UserViewType      string `json:"user_view_type"`
		SiteAdmin         bool   `json:"site_admin"`
	} `json:"user"`
	Labels []struct {
		ID          int64  `json:"id"`
		NodeID      string `json:"node_id"`
		URL         string `json:"url"`
		Name        string `json:"name"`
		Color       string `json:"color"`
		Default     bool   `json:"default"`
		Description string `json:"description"`
	} `json:"labels"`
	State             string    `json:"state"`
	Locked            bool      `json:"locked"`
	Assignee          any       `json:"assignee"`
	Assignees         []any     `json:"assignees"`
	Milestone         any       `json:"milestone"`
	Comments          int       `json:"comments"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
	ClosedAt          any       `json:"closed_at"`
	AuthorAssociation string    `json:"author_association"`
	Type              struct {
		ID          int       `json:"id"`
		NodeID      string    `json:"node_id"`
		Name        string    `json:"name"`
		Description string    `json:"description"`
		Color       string    `json:"color"`
		CreatedAt   time.Time `json:"created_at"`
		UpdatedAt   time.Time `json:"updated_at"`
		IsEnabled   bool      `json:"is_enabled"`
	} `json:"type"`
	SubIssuesSummary struct {
		Total            int `json:"total"`
		Completed        int `json:"completed"`
		PercentCompleted int `json:"percent_completed"`
	} `json:"sub_issues_summary"`
	ActiveLockReason any    `json:"active_lock_reason"`
	Body             string `json:"body"`
	ClosedBy         any    `json:"closed_by"`
	Reactions        struct {
		URL        string `json:"url"`
		TotalCount int    `json:"total_count"`
		Num1       int    `json:"+1"`
		Num10      int    `json:"-1"`
		Laugh      int    `json:"laugh"`
		Hooray     int    `json:"hooray"`
		Confused   int    `json:"confused"`
		Heart      int    `json:"heart"`
		Rocket     int    `json:"rocket"`
		Eyes       int    `json:"eyes"`
	} `json:"reactions"`
	TimelineURL           string `json:"timeline_url"`
	PerformedViaGithubApp any    `json:"performed_via_github_app"`
	StateReason           any    `json:"state_reason"`
}


type TableData struct {
	Issues []struct {
		Title  string `header:"Title"`
		Number int    `header:"Number"`
		State  string `header:"State"`
    Asignee string `header:"Asignee"`
	}
}

func (t AutoGenerated) FromResp() TableData {

	var data TableData

	for _, issue := range t {
		data.Issues = append(data.Issues, struct {
			Title  string `header:"Title"`
			Number int    `header:"Number"`
			State  string `header:"State"`
			Asignee  string `header:"Asignee"`
		}{
			Title:  issue.Title,
			Number: issue.Number,
			State:  issue.State,
      Asignee: issue.User.Login,
		})
	}

	return data
}
