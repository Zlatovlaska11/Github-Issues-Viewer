package dataschemes

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"

	"github.com/joho/godotenv"
	"github.com/kataras/tablewriter"
	"github.com/lensesio/tableprinter"
)

func GetIssues(repo string) string {
	err := godotenv.Load()

	if err != nil {
		panic("cannot load env")
	}

	token := os.Getenv("TOKEN")

	reqVal := fmt.Sprintf("https://api.github.com/repos/Strnadi/%s/issues", repo)
	req, err := http.NewRequest("GET", reqVal, nil)

	req.Header.Set("Authorization", "Bearer "+token)
	req.Header.Set("Accept", "application/vnd.github+json")
	req.Header.Set("User-Agent", "go-github-client")

	client := &http.Client{}

	resp, err := client.Do(req)

	if err != nil {
		panic("error sending")
	}

	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		fmt.Printf(resp.Status)
		os.Exit(-1)
	}

	body, _ := io.ReadAll(resp.Body)

	return string(body)

}

func ParseIssues(resp string) TableData {
	var issues AutoGenerated

	err := json.Unmarshal([]byte(resp), &issues)

	if err != nil {
		panic("cannot parse issues")
	}
	return issues.FromResp()
}

func tablePrint(data AutoGenerated) string {
  var buf bytes.Buffer
	printer := tableprinter.New(&buf)

	table := data.FromResp()
	printer.BorderTop, printer.BorderBottom, printer.BorderLeft, printer.BorderRight = true, true, true, true
	printer.CenterSeparator = "│"
	printer.ColumnSeparator = "│"
	printer.RowSeparator = "─"
	printer.HeaderBgColor = tablewriter.BgBlackColor
	printer.HeaderFgColor = tablewriter.FgGreenColor

	printer.Print(table.Issues)

  return buf.String()

}
